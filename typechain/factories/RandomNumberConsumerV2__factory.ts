/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  Overrides,
  BytesLike,
  BigNumberish,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  RandomNumberConsumerV2,
  RandomNumberConsumerV2Interface,
} from "../RandomNumberConsumerV2";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint64",
        name: "subscriptionId",
        type: "uint64",
      },
      {
        internalType: "address",
        name: "vrfCoordinator",
        type: "address",
      },
      {
        internalType: "address",
        name: "link",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "keyHash",
        type: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "have",
        type: "address",
      },
      {
        internalType: "address",
        name: "want",
        type: "address",
      },
    ],
    name: "OnlyCoordinatorCanFulfill",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256[]",
        name: "randomWords",
        type: "uint256[]",
      },
    ],
    name: "ReturnedRandomness",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "requestId",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "randomWords",
        type: "uint256[]",
      },
    ],
    name: "rawFulfillRandomWords",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "requestRandomWords",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "s_randomWords",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "s_requestId",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x610180604052620186a063ffffffff166101209063ffffffff1660e01b815250600361ffff166101409061ffff1660f01b815250600263ffffffff166101609063ffffffff1660e01b8152503480156200005857600080fd5b5060405162000c7c38038062000c7c83398181016040528101906200007e9190620001dd565b828073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b81525050508273ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff1660601b815250508173ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff1660601b8152505080610100818152505033600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508367ffffffffffffffff1660e08167ffffffffffffffff1660c01b8152505050505050620002f4565b600081519050620001a981620002a6565b92915050565b600081519050620001c081620002c0565b92915050565b600081519050620001d781620002da565b92915050565b60008060008060808587031215620001fa57620001f9620002a1565b5b60006200020a87828801620001c6565b94505060206200021d8782880162000198565b9350506040620002308782880162000198565b92505060606200024387828801620001af565b91505092959194509250565b60006200025c826200026d565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600067ffffffffffffffff82169050919050565b600080fd5b620002b1816200024f565b8114620002bd57600080fd5b50565b620002cb8162000263565b8114620002d757600080fd5b50565b620002e5816200028d565b8114620002f157600080fd5b50565b60805160601c60a05160601c60c05160601c60e05160c01c610100516101205160e01c6101405160f01c6101605160e01c61090a6200037260003960006102a10152600061025f015260006102800152600061021d0152600061023e01526000505060006101e101526000818160c7015261011b015261090a6000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80631fe543e314610051578063e0c862891461006d578063e89e106a14610077578063f6eaffc814610095575b600080fd5b61006b60048036038101906100669190610542565b6100c5565b005b610075610185565b005b61007f61033a565b60405161008c919061071b565b60405180910390f35b6100af60048036038101906100aa91906104e8565b610340565b6040516100bc919061071b565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461017757337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f400000000000000000000000000000000000000000000000000000000815260040161016e92919061067d565b60405180910390fd5b6101818282610364565b5050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146101df57600080fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006040518663ffffffff1660e01b81526004016102e09594939291906106c8565b602060405180830381600087803b1580156102fa57600080fd5b505af115801561030e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103329190610515565b600181905550565b60015481565b6000818154811061035057600080fd5b906000526020600020016000915090505481565b806000908051906020019061037a9291906103b6565b507fefb16d61046900da527008568620fb9f8420e2f5ed4de3bfbded5035c9362b0e816040516103aa91906106a6565b60405180910390a15050565b8280548282559060005260206000209081019282156103f2579160200282015b828111156103f15782518255916020019190600101906103d6565b5b5090506103ff9190610403565b5090565b5b8082111561041c576000816000905550600101610404565b5090565b600061043361042e8461075b565b610736565b905080838252602082019050828560208602820111156104565761045561089d565b5b60005b85811015610486578161046c88826104be565b845260208401935060208301925050600181019050610459565b5050509392505050565b600082601f8301126104a5576104a4610898565b5b81356104b5848260208601610420565b91505092915050565b6000813590506104cd816108bd565b92915050565b6000815190506104e2816108bd565b92915050565b6000602082840312156104fe576104fd6108a7565b5b600061050c848285016104be565b91505092915050565b60006020828403121561052b5761052a6108a7565b5b6000610539848285016104d3565b91505092915050565b60008060408385031215610559576105586108a7565b5b6000610567858286016104be565b925050602083013567ffffffffffffffff811115610588576105876108a2565b5b61059485828601610490565b9150509250929050565b60006105aa8383610641565b60208301905092915050565b6105bf816107c0565b82525050565b60006105d082610797565b6105da81856107af565b93506105e583610787565b8060005b838110156106165781516105fd888261059e565b9750610608836107a2565b9250506001810190506105e9565b5085935050505092915050565b61062c816107d2565b82525050565b61063b816107dc565b82525050565b61064a8161080a565b82525050565b6106598161080a565b82525050565b61066881610814565b82525050565b61067781610824565b82525050565b600060408201905061069260008301856105b6565b61069f60208301846105b6565b9392505050565b600060208201905081810360008301526106c081846105c5565b905092915050565b600060a0820190506106dd6000830188610623565b6106ea602083018761066e565b6106f76040830186610632565b610704606083018561065f565b610711608083018461065f565b9695505050505050565b60006020820190506107306000830184610650565b92915050565b6000610740610751565b905061074c8282610838565b919050565b6000604051905090565b600067ffffffffffffffff82111561077657610775610869565b5b602082029050602081019050919050565b6000819050602082019050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b60006107cb826107ea565b9050919050565b6000819050919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b610841826108ac565b810181811067ffffffffffffffff821117156108605761085f610869565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b6108c68161080a565b81146108d157600080fd5b5056fea2646970667358221220322ce92bbc67ad1be9af075af2e034fc5aa5b4981ca2d15780fa9c967ac2d09764736f6c63430008070033";

type RandomNumberConsumerV2ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RandomNumberConsumerV2ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class RandomNumberConsumerV2__factory extends ContractFactory {
  constructor(...args: RandomNumberConsumerV2ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "RandomNumberConsumerV2";
  }

  deploy(
    subscriptionId: BigNumberish,
    vrfCoordinator: string,
    link: string,
    keyHash: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<RandomNumberConsumerV2> {
    return super.deploy(
      subscriptionId,
      vrfCoordinator,
      link,
      keyHash,
      overrides || {}
    ) as Promise<RandomNumberConsumerV2>;
  }
  getDeployTransaction(
    subscriptionId: BigNumberish,
    vrfCoordinator: string,
    link: string,
    keyHash: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      subscriptionId,
      vrfCoordinator,
      link,
      keyHash,
      overrides || {}
    );
  }
  attach(address: string): RandomNumberConsumerV2 {
    return super.attach(address) as RandomNumberConsumerV2;
  }
  connect(signer: Signer): RandomNumberConsumerV2__factory {
    return super.connect(signer) as RandomNumberConsumerV2__factory;
  }
  static readonly contractName: "RandomNumberConsumerV2";
  public readonly contractName: "RandomNumberConsumerV2";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RandomNumberConsumerV2Interface {
    return new utils.Interface(_abi) as RandomNumberConsumerV2Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): RandomNumberConsumerV2 {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as RandomNumberConsumerV2;
  }
}
