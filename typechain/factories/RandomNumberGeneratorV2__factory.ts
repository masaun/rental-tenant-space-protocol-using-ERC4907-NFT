/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  Overrides,
  BytesLike,
  BigNumberish,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  RandomNumberGeneratorV2,
  RandomNumberGeneratorV2Interface,
} from "../RandomNumberGeneratorV2";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint64",
        name: "subscriptionId",
        type: "uint64",
      },
      {
        internalType: "address",
        name: "vrfCoordinator",
        type: "address",
      },
      {
        internalType: "address",
        name: "link",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "keyHash",
        type: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "have",
        type: "address",
      },
      {
        internalType: "address",
        name: "want",
        type: "address",
      },
    ],
    name: "OnlyCoordinatorCanFulfill",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256[]",
        name: "randomWords",
        type: "uint256[]",
      },
    ],
    name: "ReturnedRandomness",
    type: "event",
  },
  {
    inputs: [],
    name: "getSRandomWord",
    outputs: [
      {
        internalType: "uint256",
        name: "_s_randomWord",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getSRandomWords",
    outputs: [
      {
        internalType: "uint256[]",
        name: "_s_randomWords",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getSRequestId",
    outputs: [
      {
        internalType: "uint256",
        name: "_s_requestId",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "requestId",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "randomWords",
        type: "uint256[]",
      },
    ],
    name: "rawFulfillRandomWords",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "requestRandomWords",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "s_randomWords",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "s_requestId",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x610180604052620186a063ffffffff166101209063ffffffff1660e01b815250600361ffff166101409061ffff1660f01b815250600263ffffffff166101609063ffffffff1660e01b8152503480156200005857600080fd5b5060405162000d6538038062000d6583398181016040528101906200007e9190620001dd565b828073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b81525050508273ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff1660601b815250508173ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff1660601b8152505080610100818152505033600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508367ffffffffffffffff1660e08167ffffffffffffffff1660c01b8152505050505050620002f4565b600081519050620001a981620002a6565b92915050565b600081519050620001c081620002c0565b92915050565b600081519050620001d781620002da565b92915050565b60008060008060808587031215620001fa57620001f9620002a1565b5b60006200020a87828801620001c6565b94505060206200021d8782880162000198565b9350506040620002308782880162000198565b92505060606200024387828801620001af565b91505092959194509250565b60006200025c826200026d565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600067ffffffffffffffff82169050919050565b600080fd5b620002b1816200024f565b8114620002bd57600080fd5b50565b620002cb8162000263565b8114620002d757600080fd5b50565b620002e5816200028d565b8114620002f157600080fd5b50565b60805160601c60a05160601c60c05160601c60e05160c01c610100516101205160e01c6101405160f01c6101605160e01c6109f262000373600039600061035a0152600061031801526000610339015260006102d6015260006102f7015260005050600061029a01526000818161018201526101d601526109f26000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80633e1098081161005b5780633e109808146100da578063e0c86289146100f8578063e89e106a14610102578063f6eaffc8146101205761007d565b806301d03440146100825780630671c9d3146100a05780631fe543e3146100be575b600080fd5b61008a610150565b60405161009791906107d4565b60405180910390f35b6100a8610176565b6040516100b591906107d4565b60405180910390f35b6100d860048036038101906100d391906105fb565b610180565b005b6100e2610240565b6040516100ef919061075f565b60405180910390f35b610100610298565b005b61010a6103f3565b60405161011791906107d4565b60405180910390f35b61013a600480360381019061013591906105a1565b6103f9565b60405161014791906107d4565b60405180910390f35b60008060008154811061016657610165610922565b5b9060005260206000200154905090565b6000600154905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461023257337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f4000000000000000000000000000000000000000000000000000000008152600401610229929190610736565b60405180910390fd5b61023c828261041d565b5050565b6060600080548060200260200160405190810160405280929190818152602001828054801561028e57602002820191906000526020600020905b81548152602001906001019080831161027a575b5050505050905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006040518663ffffffff1660e01b8152600401610399959493929190610781565b602060405180830381600087803b1580156103b357600080fd5b505af11580156103c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103eb91906105ce565b600181905550565b60015481565b6000818154811061040957600080fd5b906000526020600020016000915090505481565b806000908051906020019061043392919061046f565b507fefb16d61046900da527008568620fb9f8420e2f5ed4de3bfbded5035c9362b0e81604051610463919061075f565b60405180910390a15050565b8280548282559060005260206000209081019282156104ab579160200282015b828111156104aa57825182559160200191906001019061048f565b5b5090506104b891906104bc565b5090565b5b808211156104d55760008160009055506001016104bd565b5090565b60006104ec6104e784610814565b6107ef565b9050808382526020820190508285602086028201111561050f5761050e610985565b5b60005b8581101561053f57816105258882610577565b845260208401935060208301925050600181019050610512565b5050509392505050565b600082601f83011261055e5761055d610980565b5b813561056e8482602086016104d9565b91505092915050565b600081359050610586816109a5565b92915050565b60008151905061059b816109a5565b92915050565b6000602082840312156105b7576105b661098f565b5b60006105c584828501610577565b91505092915050565b6000602082840312156105e4576105e361098f565b5b60006105f28482850161058c565b91505092915050565b600080604083850312156106125761061161098f565b5b600061062085828601610577565b925050602083013567ffffffffffffffff8111156106415761064061098a565b5b61064d85828601610549565b9150509250929050565b600061066383836106fa565b60208301905092915050565b61067881610879565b82525050565b600061068982610850565b6106938185610868565b935061069e83610840565b8060005b838110156106cf5781516106b68882610657565b97506106c18361085b565b9250506001810190506106a2565b5085935050505092915050565b6106e58161088b565b82525050565b6106f481610895565b82525050565b610703816108c3565b82525050565b610712816108c3565b82525050565b610721816108cd565b82525050565b610730816108dd565b82525050565b600060408201905061074b600083018561066f565b610758602083018461066f565b9392505050565b60006020820190508181036000830152610779818461067e565b905092915050565b600060a08201905061079660008301886106dc565b6107a36020830187610727565b6107b060408301866106eb565b6107bd6060830185610718565b6107ca6080830184610718565b9695505050505050565b60006020820190506107e96000830184610709565b92915050565b60006107f961080a565b905061080582826108f1565b919050565b6000604051905090565b600067ffffffffffffffff82111561082f5761082e610951565b5b602082029050602081019050919050565b6000819050602082019050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b6000610884826108a3565b9050919050565b6000819050919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b6108fa82610994565b810181811067ffffffffffffffff8211171561091957610918610951565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b6109ae816108c3565b81146109b957600080fd5b5056fea2646970667358221220f8636952463afac0f36011aa3568f9a44e5f49f59b40c7a907e376a7f28e7a4b64736f6c63430008070033";

type RandomNumberGeneratorV2ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RandomNumberGeneratorV2ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class RandomNumberGeneratorV2__factory extends ContractFactory {
  constructor(...args: RandomNumberGeneratorV2ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "RandomNumberGeneratorV2";
  }

  deploy(
    subscriptionId: BigNumberish,
    vrfCoordinator: string,
    link: string,
    keyHash: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<RandomNumberGeneratorV2> {
    return super.deploy(
      subscriptionId,
      vrfCoordinator,
      link,
      keyHash,
      overrides || {}
    ) as Promise<RandomNumberGeneratorV2>;
  }
  getDeployTransaction(
    subscriptionId: BigNumberish,
    vrfCoordinator: string,
    link: string,
    keyHash: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      subscriptionId,
      vrfCoordinator,
      link,
      keyHash,
      overrides || {}
    );
  }
  attach(address: string): RandomNumberGeneratorV2 {
    return super.attach(address) as RandomNumberGeneratorV2;
  }
  connect(signer: Signer): RandomNumberGeneratorV2__factory {
    return super.connect(signer) as RandomNumberGeneratorV2__factory;
  }
  static readonly contractName: "RandomNumberGeneratorV2";
  public readonly contractName: "RandomNumberGeneratorV2";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RandomNumberGeneratorV2Interface {
    return new utils.Interface(_abi) as RandomNumberGeneratorV2Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): RandomNumberGeneratorV2 {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as RandomNumberGeneratorV2;
  }
}
