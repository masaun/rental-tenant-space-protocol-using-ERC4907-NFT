/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { ShoppingMall, ShoppingMallInterface } from "../ShoppingMall";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    stateMutability: "payable",
    type: "fallback",
  },
  {
    inputs: [
      {
        internalType: "contract ITenantSpaceNFT",
        name: "tenantSpaceNFT",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tenantSpaceId",
        type: "uint256",
      },
      {
        internalType: "address payable",
        name: "tenantOwner",
        type: "address",
      },
      {
        internalType: "address",
        name: "tenantUser",
        type: "address",
      },
      {
        internalType: "uint64",
        name: "expires",
        type: "uint64",
      },
    ],
    name: "rentTenantSpaceNFT",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract ITenantSpaceNFT",
        name: "tenantSpaceNFT",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tenantSpaceId",
        type: "uint256",
      },
    ],
    name: "storeTenantSpaceNFT",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506105af806100206000396000f3fe60806040526004361061002d5760003560e01c806360729c7c14610036578063a249e8d11461007357610034565b3661003457005b005b34801561004257600080fd5b5061005d600480360381019061005891906102bd565b6100a3565b60405161006a919061042f565b60405180910390f35b61008d600480360381019061008891906102fd565b61011f565b60405161009a9190610414565b60405180910390f35b6000803390508373ffffffffffffffffffffffffffffffffffffffff166323b872dd8230866040518463ffffffff1660e01b81526004016100e6939291906103b4565b600060405180830381600087803b15801561010057600080fd5b505af1158015610114573d6000803e3d6000fd5b505050505092915050565b60008573ffffffffffffffffffffffffffffffffffffffff1663a22cb4658460016040518363ffffffff1660e01b815260040161015d9291906103eb565b600060405180830381600087803b15801561017757600080fd5b505af115801561018b573d6000803e3d6000fd5b505050508573ffffffffffffffffffffffffffffffffffffffff1663e030565e8685856040518463ffffffff1660e01b81526004016101cc9392919061044a565b600060405180830381600087803b1580156101e657600080fd5b505af11580156101fa573d6000803e3d6000fd5b5050505060003490508473ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610249573d6000803e3d6000fd5b505095945050505050565b60008135905061026381610506565b92915050565b6000813590506102788161051d565b92915050565b60008135905061028d81610534565b92915050565b6000813590506102a28161054b565b92915050565b6000813590506102b781610562565b92915050565b600080604083850312156102d4576102d3610501565b5b60006102e28582860161027e565b92505060206102f385828601610293565b9150509250929050565b600080600080600060a0868803121561031957610318610501565b5b60006103278882890161027e565b955050602061033888828901610293565b945050604061034988828901610269565b935050606061035a88828901610254565b925050608061036b888289016102a8565b9150509295509295909350565b61038181610481565b82525050565b610390816104a5565b82525050565b61039f816104e3565b82525050565b6103ae816104ed565b82525050565b60006060820190506103c96000830186610378565b6103d66020830185610378565b6103e36040830184610396565b949350505050565b60006040820190506104006000830185610378565b61040d6020830184610387565b9392505050565b60006020820190506104296000830184610387565b92915050565b60006020820190506104446000830184610396565b92915050565b600060608201905061045f6000830186610396565b61046c6020830185610378565b61047960408301846103a5565b949350505050565b600061048c826104c3565b9050919050565b600061049e826104c3565b9050919050565b60008115159050919050565b60006104bc82610481565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600067ffffffffffffffff82169050919050565b600080fd5b61050f81610481565b811461051a57600080fd5b50565b61052681610493565b811461053157600080fd5b50565b61053d816104b1565b811461054857600080fd5b50565b610554816104e3565b811461055f57600080fd5b50565b61056b816104ed565b811461057657600080fd5b5056fea26469706673582212200f3ef944d7b01aa7715bd3684579ca6877ace75f1d7efa23258291d72f2bd28b64736f6c63430008070033";

type ShoppingMallConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ShoppingMallConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ShoppingMall__factory extends ContractFactory {
  constructor(...args: ShoppingMallConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "ShoppingMall";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ShoppingMall> {
    return super.deploy(overrides || {}) as Promise<ShoppingMall>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): ShoppingMall {
    return super.attach(address) as ShoppingMall;
  }
  connect(signer: Signer): ShoppingMall__factory {
    return super.connect(signer) as ShoppingMall__factory;
  }
  static readonly contractName: "ShoppingMall";
  public readonly contractName: "ShoppingMall";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ShoppingMallInterface {
    return new utils.Interface(_abi) as ShoppingMallInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ShoppingMall {
    return new Contract(address, _abi, signerOrProvider) as ShoppingMall;
  }
}
